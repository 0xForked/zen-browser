diff --git a/browser/components/customizableui/CustomizeMode.sys.mjs b/browser/components/customizableui/CustomizeMode.sys.mjs
index 5f6d01d8337efc515cc2687782a07af893ea85d8..b008373667b629ff6d230bea0114a28f9847ace9 100644
--- a/browser/components/customizableui/CustomizeMode.sys.mjs
+++ b/browser/components/customizableui/CustomizeMode.sys.mjs
@@ -138,6 +138,7 @@ export function CustomizeMode(aWindow) {
   Services.prefs.addObserver(kBookmarksToolbarPref, this);
 
   this.window.addEventListener("unload", this);
+  this._zenUpdateWindowSeparator();
 }
 
 CustomizeMode.prototype = {
@@ -356,7 +357,7 @@ CustomizeMode.prototype = {
       this._transitioning = true;
 
       let customizer = document.getElementById("customization-container");
-      let browser = document.getElementById("browser");
+      let browser = document.getElementById("tabbrowser-tabbox");
       browser.hidden = true;
       customizer.hidden = false;
 
@@ -487,7 +488,7 @@ CustomizeMode.prototype = {
     }
 
     let customizer = document.getElementById("customization-container");
-    let browser = document.getElementById("browser");
+    let browser = document.getElementById("tabbrowser-tabbox");
     customizer.hidden = true;
     browser.hidden = false;
 
@@ -2278,6 +2279,20 @@ CustomizeMode.prototype = {
         if (makeSpaceImmediately) {
           aItem.setAttribute("notransition", "true");
         }
+        if (aItem.parentElement.id === "TabsToolbar-customization-target")  {
+          // We change the border values so we can properly implement the native vertical tabs
+          // drag and drop behavior.
+          aItem.style.borderColor = "transparent";
+          if (aValue == "before") {
+            prop = "borderTopWidth";
+            otherProp = "borderBottomWidth";
+            aItem.style.borderTopStyle = "solid";
+          } else {
+            prop = "borderBottomWidth";
+            otherProp = "borderTopWidth";
+            aItem.style.borderBottomStyle = "solid";
+          }
+        }
         aItem.style[prop] = borderWidth + "px";
         aItem.style.removeProperty(otherProp);
         if (makeSpaceImmediately) {
@@ -2931,6 +2946,19 @@ CustomizeMode.prototype = {
 
     return uninit;
   },
+
+  _zenUpdateWindowSeparator() {
+    let range = this.$("customization-zen-browser-space");
+    const kZenThemePanelSeparationPref = "zen.theme.panel-separation";
+    range.value = Services.prefs.getIntPref(kZenThemePanelSeparationPref);
+    range.addEventListener("input", () => {
+      let value = range.value;
+      Services.prefs.setIntPref(kZenThemePanelSeparationPref, value);
+    });
+    Services.prefs.addObserver(kZenThemePanelSeparationPref, () => {
+      range.value = Services.prefs.getIntPref(kZenThemePanelSeparationPref);
+    });
+  },
 };
 
 function __dumpDragData(aEvent, caller) {
